name: Build

on:
  push:
    branches: [ "main", "develop", "release/**" ]
  pull_request:
    branches: [ "main", "develop" ]

permissions:
  contents: write
  packages: write

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.gitversion.outputs.semVer }}
      versionCode: ${{ steps.run_number.outputs.versionCode }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.6
        with:
          versionSpec: '5.x'
      - name: Use GitVersion
        id: gitversion # step id used as reference for output values
        uses: gittools/actions/gitversion/execute@v0.9.6
        with:
          useConfigFile: true
          configFilePath: ./gitversion.yml
      - name: Display SemVer
        run: |
          echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"
      - name: run number with offset
        id: run_number
        env:
          NUM: ${{ github.run_number }}
        run: |
          current_run_number=${{ github.run_number }}
          new_number=$((current_run_number+600))
          echo "versionCode=${new_number}" >> $GITHUB_OUTPUT
      - run: echo ${{steps.run_number.outputs.versionCode}}
  build:
    strategy:
      fail-fast: false
      matrix:
        platform: [StandaloneLinux64,StandaloneWindows64]
        include:
          - os: ubuntu-latest
#          - os: macos-latest
#            platform: StandaloneOSX
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true
      - uses: actions/cache@v3
        with:
          path: Library
          key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-
      - name: Build project
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: ${{ matrix.platform }}
      - uses: actions/upload-artifact@v3
        with:
          name: Build${{ matrix.platform }}
          path: build
  publish:
    needs:
      - version
      - build
    if: ${{ github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/heads/release') || github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    steps:
#      - uses: actions/download-artifact@master
#        with:
#          name: BuildWebGL
#          path: ./
      - uses: actions/download-artifact@master
        with:
          name: BuildStandaloneLinux64
          path: ./
      - uses: actions/download-artifact@master
        with:
          name: BuildStandaloneWindows64
          path: ./
#      - uses: actions/download-artifact@master
#        with:
#          name: BuildStandaloneOSX
#          path: ./
      - run: ls
      - name: release
        uses: actions/create-release@v1
        id: create_release
        with:
          draft: false
          prerelease: ${{ github.ref != 'refs/heads/main' }}
          tag_name: pre/v${{ needs.version.outputs.version }}
          release_name: Prerelease ${{ needs.version.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ github.token }}
#      - name: upload artifact
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ github.token }}
#        with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }}
#          asset_path: ./StandaloneOSX/StandaloneOSX.app
#          asset_name: StandaloneOSX.app
#          asset_content_type: application/octet-stream
      - name: Create windows zip
        run: zip -r windows-${{ needs.version.outputs.version }}.zip ./StandaloneWindows64
      - name: upload artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: windows-${{ needs.version.outputs.version }}.zip
          asset_name: windows-${{ needs.version.outputs.version }}.zip
          asset_content_type: application/x-zip
      - name: Create linux zip
        run: zip -r linux-${{ needs.version.outputs.version }}.zip ./StandaloneLinux64
      - name: upload artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: linux-${{ needs.version.outputs.version }}.zip
          asset_name: linux-${{ needs.version.outputs.version }}.zip
          asset_content_type: application/x-zip
#      - name: Create WebGL zip
#        run: zip -r webgl-${{ needs.version.outputs.version }}.zip ./WebGL
#      - name: upload artifact
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ github.token }}
#        with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }}
#          asset_path: webgl-${{ needs.version.outputs.version }}.zip
#          asset_name: webgl-${{ needs.version.outputs.version }}.zip
#          asset_content_type: application/x-zip